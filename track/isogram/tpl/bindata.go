// Code generated by go-bindata. DO NOT EDIT.
// sources:
// if-continue.md (341B)
// isletter.md (151B)
// just-return.md (132B)
// mustcompile.md (265B)
// nonexisting-map-value.md (409B)
// regex-in-func.md (502B)
// unicode-loop.md (99B)
// unicode.md (123B)

package tpl

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ifContinueMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x90\xb1\x6a\x2b\x41\x0c\x45\x7b\x7f\xc5\xc5\xd5\x7b\xc5\xee\x92\x26\x31\xa9\x92\x2a\xa4\x4f\x17\x02\x96\x77\xb4\x3b\xc2\xb3\xd2\x30\xa3\x75\x98\xbf\x0f\xe3\x40\x3a\x21\x74\xaf\x0e\x67\xc0\x9b\x21\xf0\x8d\x93\x65\x2e\x15\x5e\x1a\xdc\x40\x37\x93\x80\x5d\x95\x6b\xa5\xd2\x20\x81\xd5\xc9\xc5\xb4\x82\x2a\x3c\x72\xc3\x46\x57\xc6\x6c\x81\x11\xa9\x84\x9e\x2a\x4c\x61\xc4\x47\xe4\xc2\x90\x0a\xc2\x25\xd9\x8a\x6c\xd5\x41\x17\xdb\x1d\x07\x8f\x0c\xb7\x2c\x33\x66\x4a\x89\x03\x3e\x8f\xaf\x29\xc9\xaa\xbd\x12\x91\x72\x6e\xc8\xe4\xb1\xb7\xf5\x4d\xe2\xc5\xc1\x61\xe5\xe3\xd7\xbf\xe8\x9e\xeb\xf3\x34\x6d\x1c\x64\xdf\xc6\xd9\xb6\xe9\x65\x23\x2f\x8d\xcb\x94\x44\x79\xb0\x65\xa8\xb2\x46\x1f\x44\x87\xce\x35\x3c\x9c\x1e\x43\x78\x9a\x03\xd3\xe9\xf4\x7f\x3c\xbc\x2f\x68\xb6\x43\xf4\xc6\xc5\xfb\x58\x20\x0b\x48\x03\xf6\xca\xf7\x77\xe7\xd9\xd4\x45\x77\x3e\xe3\xca\xed\xdb\x4a\xb8\x27\x66\x52\x24\xb3\xca\x30\x65\x88\xfe\xc9\x40\xea\xe6\x20\xbf\xf8\x8b\x95\x7e\x96\xc7\x9f\x00\x00\x00\xff\xff\x54\xe0\xa5\xfa\x55\x01\x00\x00")

func ifContinueMdBytes() ([]byte, error) {
	return bindataRead(
		_ifContinueMd,
		"if-continue.md",
	)
}

func ifContinueMd() (*asset, error) {
	bytes, err := ifContinueMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "if-continue.md", size: 341, mode: os.FileMode(420), modTime: time.Unix(1541855175, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x32, 0xa4, 0x69, 0x72, 0xe0, 0xd3, 0xbb, 0x9, 0x4b, 0x85, 0x6d, 0x5a, 0x6a, 0x9b, 0xa3, 0x49, 0xae, 0x67, 0xa1, 0x51, 0x34, 0xb1, 0xbd, 0x9d, 0x7e, 0xfb, 0x6b, 0x33, 0x5f, 0x3b, 0xd7, 0xd2}}
	return a, nil
}

var _isletterMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcc\x41\x0e\x02\x21\x0c\x46\xe1\xbd\xa7\xf8\x2f\x20\xf7\x30\x71\xe9\xc6\x1d\x0d\x94\xa1\x91\xa1\x93\x52\x8c\xde\x7e\x32\xac\x5f\xde\x77\xc7\x5b\x27\xc8\x18\x73\x48\xdf\x10\x8d\x37\xfe\x1d\x11\xae\x90\xcc\xdd\xa5\xfc\x21\x05\x84\x54\xc9\x20\x03\x84\xc6\xee\x6c\x50\x43\x57\x0f\x0b\x48\x3a\x5b\x46\xa5\x2f\x5f\x5d\xf5\x03\x72\xc4\xd9\x25\x69\xe6\xf0\x18\xcf\xb5\xc4\x80\xdb\xab\x92\x5f\xcc\x3e\x53\xc5\x90\xfd\x68\x6c\xa0\x9e\xd7\xe7\x28\x34\x9c\x2d\x9c\x01\x00\x00\xff\xff\x52\x19\x0f\xee\x97\x00\x00\x00")

func isletterMdBytes() ([]byte, error) {
	return bindataRead(
		_isletterMd,
		"isletter.md",
	)
}

func isletterMd() (*asset, error) {
	bytes, err := isletterMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "isletter.md", size: 151, mode: os.FileMode(420), modTime: time.Unix(1541853515, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xaa, 0x90, 0xca, 0x17, 0x6, 0x15, 0xed, 0x60, 0xf4, 0xea, 0xec, 0xae, 0xd3, 0x9c, 0xa5, 0xd7, 0xc4, 0x5b, 0x1b, 0x75, 0xb0, 0xe5, 0x57, 0x99, 0x29, 0x60, 0x54, 0x0, 0xb5, 0xd5, 0x67, 0x82}}
	return a, nil
}

var _justReturnMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\x41\x0e\x82\x40\x10\x44\xd1\xbd\xa7\xa8\x0b\xc8\x7d\x5c\x36\x52\xe8\xe8\xcc\x94\x69\xba\x49\xe6\xf6\x06\x12\xb6\x3f\x3f\xef\x8e\x87\x12\xe6\xc4\xec\xb4\x6f\xe9\x2f\x28\x03\x5a\x11\x6f\x62\x95\xa3\x4a\x3f\xa8\xd7\x81\x10\x9c\x91\xde\x61\xd8\xcd\x8b\xcd\x95\x18\x4a\x7c\x72\x0b\x6c\x8c\xe9\xc4\x9e\xca\xba\x5c\x67\x69\x8d\x4b\xb1\x60\x1d\x37\xeb\x47\x6e\xda\x79\xe2\x17\x31\xfd\x03\x00\x00\xff\xff\xc6\x92\xee\xde\x84\x00\x00\x00")

func justReturnMdBytes() ([]byte, error) {
	return bindataRead(
		_justReturnMd,
		"just-return.md",
	)
}

func justReturnMd() (*asset, error) {
	bytes, err := justReturnMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "just-return.md", size: 132, mode: os.FileMode(420), modTime: time.Unix(1541853515, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x68, 0xf5, 0x81, 0x94, 0x81, 0xb3, 0xc6, 0xda, 0x1, 0x9c, 0x91, 0x74, 0x6b, 0x88, 0xf6, 0xa3, 0x66, 0xb2, 0xb3, 0x39, 0x86, 0xf4, 0xb2, 0x5c, 0x4c, 0x35, 0xb1, 0xd5, 0x1d, 0x1, 0x6e, 0x56}}
	return a, nil
}

var _mustcompileMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xcb\x6d\x03\x31\x0c\x05\xef\xae\xe2\x35\x10\x37\x91\x73\x4e\x49\x01\xe6\x4a\xcf\x5a\xc2\xfa\x41\xa4\xfc\xe9\x3e\x50\xb2\x97\x20\x37\x82\xc0\xcc\x90\x6f\xf8\x6a\x08\xad\x74\xcd\x84\xc0\x5c\x5c\x03\x06\x13\x9f\x50\x87\x1a\x24\xde\xd5\x64\xcb\x84\x37\x4c\x23\x2e\x1f\xd3\xfc\xfd\x17\xb9\x9c\xf1\xa9\x35\xfc\x47\x0d\xd3\xa6\xe4\xfc\xc2\x46\x73\x9c\x8e\x44\x84\x38\xba\x84\x9b\x24\x22\xf3\xce\x0c\xa9\xf1\xaf\x12\x5d\xaa\x06\x83\x5e\xe1\x3b\x07\x7f\x8e\x40\x1f\x6d\xcb\x2c\x78\xa8\xef\x6b\x7f\x84\xd6\x14\x97\xa7\x75\x0e\x24\xba\x9d\xb4\x14\x46\x15\x27\xae\x64\xdc\x24\xdc\xf0\xd8\x59\xe1\xe3\xa5\x35\xad\x2f\xf8\x64\x98\x4e\xec\x6a\xcb\x9b\x86\x94\xf3\x77\x00\x00\x00\xff\xff\x7d\x75\xcc\x7b\x09\x01\x00\x00")

func mustcompileMdBytes() ([]byte, error) {
	return bindataRead(
		_mustcompileMd,
		"mustcompile.md",
	)
}

func mustcompileMd() (*asset, error) {
	bytes, err := mustcompileMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mustcompile.md", size: 265, mode: os.FileMode(420), modTime: time.Unix(1541853515, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdf, 0xee, 0xfa, 0x75, 0xb5, 0x7, 0xdf, 0x6, 0x8, 0x3b, 0x32, 0xba, 0xaa, 0xa9, 0xdf, 0x9, 0xcc, 0xf2, 0xd6, 0x7d, 0x9d, 0xba, 0xc1, 0xf8, 0x5, 0xcb, 0x98, 0xeb, 0x31, 0x30, 0xf1, 0x1a}}
	return a, nil
}

var _nonexistingMapValueMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xd0\x31\x6e\xe3\x30\x10\x85\xe1\xde\xa7\x78\xc0\x36\xbb\xc0\x46\xea\xdd\xa4\x49\xe3\x3e\x4d\x60\x18\xe6\x44\x1a\x89\x84\xe4\x19\x85\x1c\xca\x66\x82\xdc\x3d\x10\xed\xb4\xc4\x4f\xf0\x7b\x7c\xc2\x4b\xe8\x51\x34\x63\x12\xbd\xc2\x3c\x19\x08\x17\x5a\x10\x04\xa3\x42\x78\xe5\x88\x85\x24\x74\x09\x61\xa8\x25\xa5\x09\x83\x46\x10\x44\x85\x6f\x21\x19\x8b\x61\xe2\xf2\x8c\x83\x24\x63\xea\x11\x0c\x91\x2d\x47\x49\x30\xcf\xd8\x1d\x3f\x39\x2a\x56\x9a\x33\x9f\xfe\x7a\xb3\x25\xed\xdb\x76\xd4\x99\x64\x6c\x34\x8e\x6d\xe4\xa1\x4d\x0b\x77\x7f\x5e\x3d\x9f\xb7\xf6\x5c\xdb\x7f\xd8\x9e\x2f\xb0\xb2\xf0\x03\xe4\x29\x35\x3b\xe0\x70\xa7\x78\x5a\x19\x04\x77\xa1\xe5\x98\xf4\xc2\x5b\x78\x7a\x57\x9d\xdd\x46\xb8\x86\x79\x7e\x38\xe0\x06\x9a\x13\xbb\x6d\xc3\x26\x62\xb1\x58\xd0\x2b\x27\x88\x1a\xea\x8a\x06\x6f\x9a\xd1\x91\xa0\xde\xa8\x7f\x61\xba\x2b\x9a\x23\xa8\x5f\x49\x8c\xc6\xca\x30\x1f\x12\xf8\xc6\xb1\x0b\x89\x41\xd2\xe3\x23\x57\xa6\xe7\x4a\x71\xb8\x06\xf3\x9a\x0d\x39\x05\x19\xef\xe7\x75\xd0\x7f\xe8\xe4\x90\x8a\x18\xdd\xf6\x70\x61\xc0\xa6\xfe\xd5\x4f\x5c\x4e\xf8\x6a\x9a\xe6\xdb\x35\x3f\x01\x00\x00\xff\xff\x70\x01\x1c\xcf\x99\x01\x00\x00")

func nonexistingMapValueMdBytes() ([]byte, error) {
	return bindataRead(
		_nonexistingMapValueMd,
		"nonexisting-map-value.md",
	)
}

func nonexistingMapValueMd() (*asset, error) {
	bytes, err := nonexistingMapValueMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nonexisting-map-value.md", size: 409, mode: os.FileMode(420), modTime: time.Unix(1541853515, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd6, 0x69, 0x1a, 0x4d, 0x3e, 0xf7, 0x5f, 0xa8, 0x11, 0xfd, 0x81, 0x7b, 0x6e, 0x14, 0x3f, 0x98, 0x58, 0x65, 0xa2, 0x70, 0x4c, 0xa0, 0x2f, 0x24, 0x4c, 0xe1, 0x2, 0xeb, 0x9, 0xa8, 0xc5, 0xbe}}
	return a, nil
}

var _regexInFuncMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x91\x4d\x92\x13\x31\x0c\x85\xf7\x7d\x8a\x77\x01\x9a\x23\x50\x14\x2b\x16\x6c\x28\xaa\x58\x4e\x14\x5b\xdd\x56\x8d\xdb\x72\x59\xf2\x64\xc2\xe9\x29\x65\x92\xc0\xca\xb2\xf5\xf3\xbe\x27\x7f\xc2\xf7\x0d\x49\x0f\x69\x3b\xb6\xa1\x07\xd4\x0b\x0f\x54\x6a\xfb\xa4\x9d\x0d\x57\x9d\xe8\x43\xcf\x74\xae\x57\x0c\xa6\x2a\x7f\x38\xc3\x0b\x39\x06\xef\xfc\x0e\x69\xd8\x15\x17\x1d\xaf\x06\xc2\x59\x1c\x59\xb6\x8d\x07\x37\x5f\xf1\xbb\x5c\xbf\xe0\x57\xe1\x28\x59\x32\xbf\x71\xd5\xce\xc3\xd0\xa7\xc3\x0b\xc3\xaa\x5e\xd0\x69\xb8\x41\xb7\x08\x2c\x40\x22\xf3\x31\x9c\x5a\x46\x1f\xdc\x69\xc4\xbb\x38\xc8\x70\xcc\x54\xe2\xec\x6a\x26\xe7\xca\xd8\x74\xe0\x20\x4f\xe5\x56\xd3\x5c\x41\x58\x5e\x92\x1e\x5d\x2a\xb9\x68\x7b\x81\x39\xf7\x15\x5f\x83\xf0\x49\x71\xb3\x66\x45\x67\xcd\xe0\x77\x4e\xd3\xf9\xa6\x7c\xfa\x76\xeb\xe4\xd3\xe7\xd3\x8f\x69\xfe\xb8\x61\x9b\x2d\xc5\xb4\xd0\xae\xe2\x5e\x39\xa2\xe5\x81\xb1\x2e\x0b\xf0\x53\xf6\xe2\x68\x7a\x09\x56\x31\x48\x33\xc9\x1c\x4a\xe3\x5f\xbf\xe9\x3d\x7b\x57\xcd\xe0\x37\x1e\x57\xb8\x1c\x1f\x04\xcf\x4a\x31\x24\xaa\x95\xf3\x1a\xdf\x94\x63\xfb\x6d\xc7\x45\xbc\x60\x21\x98\x93\x4b\xba\x6f\x2a\xcc\x24\x6a\xcf\xcd\xfe\x67\x1f\xda\xd0\x29\xbd\xd2\xce\xa8\xe1\x7e\xfd\x1b\x00\x00\xff\xff\x43\x59\x87\xe2\xf6\x01\x00\x00")

func regexInFuncMdBytes() ([]byte, error) {
	return bindataRead(
		_regexInFuncMd,
		"regex-in-func.md",
	)
}

func regexInFuncMd() (*asset, error) {
	bytes, err := regexInFuncMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "regex-in-func.md", size: 502, mode: os.FileMode(420), modTime: time.Unix(1541853515, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5f, 0x49, 0xf, 0x40, 0x41, 0xe3, 0xde, 0x7, 0x4a, 0xee, 0x6b, 0x37, 0x5c, 0xa5, 0x1f, 0x8, 0xdc, 0xec, 0x3f, 0x3b, 0x64, 0xe1, 0xec, 0xc3, 0x85, 0x9e, 0x6f, 0xe0, 0x44, 0x9, 0xda, 0x4e}}
	return a, nil
}

var _unicodeLoopMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcb\x41\x0a\x42\x31\x0c\x45\xd1\xad\xbc\x89\x43\x05\x97\x23\x22\x34\xa4\x0f\x7f\xb0\x24\xa5\x49\x5d\xbf\xfc\x81\xe3\x7b\xcf\x15\x8f\xd8\xd0\xd8\xa3\xe3\x90\x2f\x21\x18\x11\x1f\x48\xa1\x6d\x37\x8d\xce\xdb\xe5\x79\x7f\x65\x43\x05\x16\xe7\x10\x25\x5a\xd6\x32\x7f\xe7\x3f\x99\xa3\x0e\x9e\x72\x9e\x9b\xb9\x2e\x4a\x12\x39\xc9\xfe\x0b\x00\x00\xff\xff\x94\x62\xa1\xb6\x63\x00\x00\x00")

func unicodeLoopMdBytes() ([]byte, error) {
	return bindataRead(
		_unicodeLoopMd,
		"unicode-loop.md",
	)
}

func unicodeLoopMd() (*asset, error) {
	bytes, err := unicodeLoopMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "unicode-loop.md", size: 99, mode: os.FileMode(420), modTime: time.Unix(1541853515, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0xcb, 0xa2, 0x9, 0xd4, 0x29, 0x1d, 0xf2, 0x29, 0x96, 0xf6, 0x79, 0x74, 0x43, 0xc3, 0x92, 0xab, 0x87, 0x97, 0x57, 0xa4, 0x70, 0xcf, 0x1f, 0x53, 0x5, 0x2a, 0xac, 0x8f, 0x54, 0xd8, 0x38}}
	return a, nil
}

var _unicodeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xca\x41\x0a\x02\x31\x0c\x05\xd0\xab\xfc\x8d\x4b\x05\x8f\x23\x22\x34\x36\xbf\x4e\x70\x68\x86\x26\xf5\xfc\x32\xca\x6c\x1f\xef\x8c\x9b\x4f\x54\x9f\xab\x62\x91\x0f\x21\x58\xdd\xdf\x90\x44\x99\xdd\xaa\x2b\x2f\xa7\xfb\xf5\x11\x05\xd6\xc3\x94\xc8\x85\x68\x3e\xf6\xb6\xed\x96\x14\x85\x37\x94\xc8\x61\xfd\x15\x47\x7f\xb2\xf9\xf8\xf7\x5f\x4d\x87\xf5\x3a\x28\x41\xc4\x46\xea\x37\x00\x00\xff\xff\x71\xe7\x46\x8e\x7b\x00\x00\x00")

func unicodeMdBytes() ([]byte, error) {
	return bindataRead(
		_unicodeMd,
		"unicode.md",
	)
}

func unicodeMd() (*asset, error) {
	bytes, err := unicodeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "unicode.md", size: 123, mode: os.FileMode(420), modTime: time.Unix(1541853515, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x37, 0x28, 0xdd, 0x43, 0xd4, 0x2, 0x2f, 0x2a, 0x5, 0xa6, 0x2e, 0xe8, 0x80, 0x72, 0xc6, 0x76, 0xed, 0x37, 0xc4, 0xc, 0x22, 0x92, 0xec, 0x40, 0x29, 0xc3, 0xbb, 0xc7, 0x35, 0x6e, 0xef, 0x2b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"if-continue.md": ifContinueMd,

	"isletter.md": isletterMd,

	"just-return.md": justReturnMd,

	"mustcompile.md": mustcompileMd,

	"nonexisting-map-value.md": nonexistingMapValueMd,

	"regex-in-func.md": regexInFuncMd,

	"unicode-loop.md": unicodeLoopMd,

	"unicode.md": unicodeMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"if-continue.md":           &bintree{ifContinueMd, map[string]*bintree{}},
	"isletter.md":              &bintree{isletterMd, map[string]*bintree{}},
	"just-return.md":           &bintree{justReturnMd, map[string]*bintree{}},
	"mustcompile.md":           &bintree{mustcompileMd, map[string]*bintree{}},
	"nonexisting-map-value.md": &bintree{nonexistingMapValueMd, map[string]*bintree{}},
	"regex-in-func.md":         &bintree{regexInFuncMd, map[string]*bintree{}},
	"unicode-loop.md":          &bintree{unicodeLoopMd, map[string]*bintree{}},
	"unicode.md":               &bintree{unicodeMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}

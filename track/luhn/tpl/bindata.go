// Code generated by go-bindata. DO NOT EDIT.
// sources:
// mustcompile.md (168B)
// one-loop.md (1.534kB)
// regex-in-func.md (306B)
// regex-to-fast.md (1.613kB)

package tpl

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mustcompileMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcc\x41\xb2\x82\x30\x10\x84\xe1\xfd\x3b\x45\xef\x78\x56\x21\x97\x70\xed\x8e\x03\x30\x86\x18\xba\x0c\x0c\x95\x99\x88\xdc\xde\x02\xb7\x5d\xfd\xfd\x57\xf4\x8a\xa0\xf3\xca\x1c\x21\x30\x17\x67\x40\x89\x29\x7e\x5a\xd0\x1b\x83\x20\xa9\x8e\xe0\x18\x05\xae\xa8\x16\x31\xdc\xab\xf9\xed\x87\xfe\x2f\x43\x87\x7e\xa2\x61\x63\xce\x08\x72\x1c\x7c\x8a\x58\x8b\xa6\x22\xf3\x61\x56\x59\x18\xc0\xe7\xb9\x9f\x6d\xd0\xc0\xe5\x2d\x99\x63\x0b\x53\xec\x5a\x9b\x9c\xf1\x5a\x74\x83\x3c\xb4\x3a\xe8\x28\x4c\x93\x43\x36\xd9\xbb\xbf\x6f\x00\x00\x00\xff\xff\xfa\x98\x2c\xcd\xa8\x00\x00\x00")

func mustcompileMdBytes() ([]byte, error) {
	return bindataRead(
		_mustcompileMd,
		"mustcompile.md",
	)
}

func mustcompileMd() (*asset, error) {
	bytes, err := mustcompileMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mustcompile.md", size: 168, mode: os.FileMode(420), modTime: time.Unix(1542541121, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x75, 0xb2, 0x40, 0x36, 0x90, 0xb3, 0x55, 0x4e, 0x7b, 0xa1, 0xe1, 0x86, 0xd4, 0x8f, 0x22, 0xe9, 0x1a, 0x8f, 0x1e, 0x8c, 0x8a, 0xf2, 0x6e, 0x83, 0xf0, 0xfe, 0x6f, 0x3a, 0xd0, 0x94, 0x91, 0x52}}
	return a, nil
}

var _oneLoopMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x5d\x6b\xe4\x46\x10\x7c\xdf\x5f\x51\xb9\x17\xdb\x10\x29\xf6\xbd\x65\xcf\x17\xb8\x70\x04\xfc\x72\x0e\x24\x60\x8e\x10\x98\xd9\x99\xd6\x6a\xf0\xa8\x5b\xcc\x87\x95\x25\x97\xff\x1e\x7a\x24\xaf\x9d\x0b\xf7\xb4\x2b\x69\xa6\xba\xba\xaa\xba\x77\x5d\xd7\xed\x3e\x4b\x4d\xc8\x12\x6b\x09\xc2\x58\x42\x19\x31\xd5\x58\xc2\x1c\x09\x51\x64\xce\x08\x19\x89\xac\xb7\x87\x48\xb0\xec\x51\xa4\xd8\x18\x4f\x18\x02\x53\x8f\xbb\x01\x27\xa9\x58\x2c\x17\x14\x81\x7d\x92\xe0\xdb\xc5\xc0\x47\xc8\x13\x25\x94\x91\x90\x4b\xd2\xe7\x33\x72\x09\x13\xe5\x76\xd1\x59\x56\x24\x0f\x8b\x5c\x68\xc6\xe1\xb4\xfe\x06\xce\x25\x55\xd7\x58\x8d\x94\x68\xbf\xdb\x75\xf8\x25\xa4\x5c\x50\x46\xc5\x5a\x08\x4c\xa4\x74\xe0\x45\x49\x06\x76\x92\x66\x49\xb6\x50\xab\xc9\xc2\x9d\x0f\xc7\x50\x30\x5a\xf6\x51\xef\x04\x2e\xd2\xbe\x4d\x36\x70\x63\xb9\xdf\xed\x80\x87\x31\x14\xca\xb3\x75\xb4\xc7\x72\xfe\xaf\x98\x36\x46\x59\xc8\x23\x8b\xd6\x53\xae\xc6\x09\x97\xc0\x95\x0c\x54\xaf\x57\xa7\xb9\x21\x2b\x68\xaf\xa0\xf7\x65\xa4\xf4\x42\x62\xaf\x00\x26\x51\xa9\x89\x31\xd8\x98\xc9\x20\x0c\xfa\x92\xd8\x49\xe5\xb2\x2a\x35\xfd\x07\x07\x9f\x37\x85\xbc\xd2\xb6\x65\xf5\xc7\x54\x0e\x4e\x3c\xf5\x77\xf9\xa3\x42\x37\x20\xd5\xd2\x26\xc2\x22\xe9\xb1\xc9\xa3\x27\x53\x65\xca\xbd\x2a\xf7\xa0\x8f\x8a\xdb\x7a\xfd\xad\x31\x76\xa3\xe5\x23\x29\x85\xc0\x25\x89\xaf\x8e\xd4\x86\x39\xc9\x21\xd2\xb4\xc7\xef\xa3\x7e\xf1\xf4\x17\x4c\x30\x90\xe1\xcc\x4b\x95\x61\x29\x68\xbc\xb5\xd8\x1b\x27\x29\x91\x2b\xf1\xf4\x06\x96\x4f\x98\x24\x51\x8f\x87\x55\x31\x97\x48\x2d\xb1\x60\x5a\xbe\x6f\x80\x33\xb1\xd7\xbc\x98\xad\x71\xd3\x72\x15\xd8\x25\x9a\x88\x0b\x26\xcb\xb5\x45\xec\x95\x16\xb8\xb4\xc3\xa6\xd1\x6b\x0f\xf4\xe2\xa6\xaa\x81\xb3\x99\xf2\x55\x8f\x8f\xc2\x17\x05\x83\xa4\x23\xb5\x50\xba\x91\xdc\x23\x5e\xee\xaf\x3d\x0c\xe7\xfa\xf8\x09\x37\xa6\xc9\xf4\x81\xa5\xd9\xf6\xeb\xaa\xc1\x57\xda\x2c\xdf\x16\x31\xe4\xcd\xa0\xd6\x73\x13\xc7\x46\x57\xe3\x73\x18\x4d\x24\x3e\x96\xd1\xe0\x40\x83\x24\x7a\xa1\xf1\x22\xd7\xcf\xf5\xf9\x3a\x58\x16\x84\x42\x2d\xca\x07\xeb\x1e\x17\x9b\x7c\xfe\xdf\x34\xe5\xc0\xae\xd9\x37\xda\x27\x82\xce\xf1\x6b\x71\x9f\x7b\x3b\x9b\x54\xe7\x3d\xcc\x20\x09\x01\xfb\xf7\x88\xc4\x97\xb9\xa4\x2b\x74\xb8\x79\x87\x6b\xdc\xbe\x47\x78\x87\xd0\x75\xf8\xbb\xef\xfb\x7f\x4c\x8f\xfb\x9a\xb0\xce\xcf\x93\x4d\xa1\x8d\x7f\xeb\x92\x18\x26\x29\x84\xa6\x4b\x31\xfe\x08\x7f\x5e\x99\x66\x77\xcd\xf4\xca\xd4\xb3\xf2\x5a\xd4\x4c\xe2\x6b\x14\xbc\x35\xda\x5d\xbf\xdb\x7d\x68\x83\x9c\x31\x4b\xe0\x6d\xa6\x33\xf2\x28\x35\xfa\x16\x62\xd8\xa3\x0e\xa9\x1a\x7c\xd0\x81\xe5\xd3\xb6\x35\x06\x9b\x0b\xa5\x66\xd7\x3d\x13\xa2\x7d\x5e\x09\xfb\xe7\xc4\x25\x9a\xa3\x7a\x63\xbe\xfb\x6a\x52\x2e\xd3\x95\xd9\x66\x28\xe1\x16\x17\xd7\x17\xf8\xf2\x05\x17\x3f\x5e\xe0\x16\x5b\x0a\x17\x82\xa6\xc6\x6e\x41\xf0\x52\x0f\x6d\x75\xc8\x80\x3c\x13\xf9\x36\xdb\x9f\xa4\xe8\xaa\x58\xe3\x10\xf2\xba\xb1\x36\xef\x7c\x92\xb9\xb9\xe4\x84\x9f\x28\x65\x5d\x60\x45\x60\x54\x2d\xd3\xe3\xae\xb4\xee\xf2\x6a\xa4\x9d\x68\xe3\x73\x38\x15\xd2\x0c\x7e\x92\x45\x91\x36\x21\x0e\xe7\xbd\x62\x13\x59\x25\x61\xde\x5e\x77\x37\xd7\xd7\xe0\xfc\x83\xcc\x06\xab\xdf\x8d\xe0\x7a\x6e\xb4\xc9\x2f\x76\x4b\xd8\x81\xd8\x8d\x93\xd5\x72\xfa\x2a\x55\x86\xb0\x2a\xd7\x75\xbb\x7f\x03\x00\x00\xff\xff\x1a\xa4\x84\x2b\xfe\x05\x00\x00")

func oneLoopMdBytes() ([]byte, error) {
	return bindataRead(
		_oneLoopMd,
		"one-loop.md",
	)
}

func oneLoopMd() (*asset, error) {
	bytes, err := oneLoopMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "one-loop.md", size: 1534, mode: os.FileMode(420), modTime: time.Unix(1542628451, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa5, 0xeb, 0x83, 0x17, 0xbb, 0xdf, 0x9f, 0x6c, 0x27, 0x42, 0xf, 0x3e, 0xa5, 0xb, 0x7d, 0xb5, 0xd7, 0x71, 0x2c, 0x5e, 0x71, 0x83, 0x4d, 0x13, 0x71, 0x43, 0x99, 0xeb, 0x9a, 0xd4, 0xc6, 0x61}}
	return a, nil
}

var _regexInFuncMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\x4d\x6e\xeb\x30\x0c\xc4\xf1\xab\xcc\x2e\x9b\x3c\x1f\xe3\x15\xdd\xe6\x06\xb2\x3c\x92\x89\xc8\xa4\x41\x51\x49\x7c\xfb\xc2\xfd\x40\xbb\xff\xcf\x6f\xfe\xe1\xc6\x3a\x5a\x72\xf0\xb5\x3b\x7b\x17\xd3\x0e\x51\xbc\x19\x9e\xe6\x77\x24\x34\x89\x68\xc4\x22\xa5\xd0\xa9\xd1\x0e\x14\xb7\x0d\x16\x2b\x1d\x2d\x69\x1d\xa9\xb2\x4f\xf8\x6f\x8e\x99\x11\x74\xec\xf4\x62\xbe\x25\xcd\xbc\x22\xc1\x59\xf9\x82\x74\x64\xdb\x76\x69\x5c\x30\xb3\x98\x13\x12\x97\x8e\xd1\xb9\x4c\xb8\x49\x5d\x03\x6a\xcf\x2b\x0e\x1b\x17\xe7\x77\x2c\x5a\x11\x2b\x7f\x0c\xed\xb2\xf0\x2c\x1c\x65\x68\x0e\x31\xbd\x62\x1e\x01\x09\x98\xb6\x03\x4a\x2e\x1d\x61\x98\xf9\x7b\x67\x9a\x39\xe1\xbd\xfc\x95\x3a\x7a\xa4\x90\x7c\x62\xc8\x49\xb1\xd9\x83\x9f\xc1\xd7\x2c\x9d\xf6\x09\xed\x29\xdf\x53\x25\x1a\x1f\x6c\xd3\x47\x00\x00\x00\xff\xff\x07\x6d\x8d\x98\x32\x01\x00\x00")

func regexInFuncMdBytes() ([]byte, error) {
	return bindataRead(
		_regexInFuncMd,
		"regex-in-func.md",
	)
}

func regexInFuncMd() (*asset, error) {
	bytes, err := regexInFuncMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "regex-in-func.md", size: 306, mode: os.FileMode(420), modTime: time.Unix(1542628451, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0x2d, 0x3a, 0xb5, 0xec, 0x9c, 0x27, 0xe3, 0x9b, 0x18, 0xc4, 0xb4, 0xc5, 0xc1, 0xc8, 0xe5, 0x60, 0xc3, 0x82, 0xe7, 0x4f, 0x21, 0x7f, 0x3c, 0xd0, 0x3d, 0xcf, 0x3, 0x6d, 0xc2, 0xe4, 0xa9}}
	return a, nil
}

var _regexToFastMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x94\x41\x6f\xdb\x46\x10\x85\xef\xfa\x15\xaf\xb9\xd8\x06\x4a\xd6\xce\xad\x8a\x53\x20\x45\x10\xc0\x97\xb8\x40\x0b\x18\x41\x51\x60\x97\xe4\x50\x5c\x98\x9a\x21\x76\x67\x45\x0b\x4d\xff\x7b\x31\x4b\x4a\x56\x53\xe4\x24\x51\xe2\xbe\x79\xf3\xbd\xd9\xd9\x54\x55\xb5\xf9\x22\x39\x22\xc9\x98\x35\x08\x63\x0e\x3a\xc0\x45\xda\xd1\x8b\x43\x48\x38\x50\x3c\x22\x92\xef\x7c\x33\x12\x3c\x77\x50\x51\x3f\x8e\x47\xf4\x81\xa9\xfe\xdf\xab\x93\xcc\x14\xfb\x3c\xa2\xc9\x8a\x34\xca\x5c\xe3\xa1\x87\x0e\x81\x77\x09\xad\x67\x34\x84\x4e\x98\xb0\xf7\x9c\x8b\x4e\xa9\x18\xc9\x27\xe1\x52\x83\xfa\x5e\xa2\x42\x07\x02\xbd\x68\xf4\x98\x25\x3e\x9b\xbe\xf4\x4a\x6c\x4f\x3a\x20\x68\x8d\x4f\x32\x8e\x32\x07\xde\xd9\x9f\x1e\x49\x69\x42\x73\x5c\x3e\x77\x39\x74\x04\x15\xec\x48\xed\xc3\xa3\xf7\x49\xcf\x6d\x6e\x37\x9b\x0a\x9f\x42\x4c\xba\x58\xc3\x4c\x60\x22\x6b\x0e\x9d\x98\x9e\x9d\x8b\xa1\x83\xf4\xf0\x7c\x3c\xb7\xd9\x1c\xb1\x97\x83\x9d\x30\x7f\xa3\xec\x42\x8b\xc0\x2a\xeb\xa3\x4c\xdb\xcd\x06\x78\x1a\x82\x52\x9a\x7c\x4b\x5b\xcc\xe7\xef\xc5\xa6\x59\xa6\x0e\x49\xac\xa4\xf1\x70\xad\xb0\x06\xce\xe4\x60\xf8\x2f\xde\xe6\xb3\x68\x6d\xa2\x8f\x3a\x50\x04\x0b\x57\x5d\xd8\x05\xdd\x9a\x80\x8b\xa4\x39\x32\x7a\x3f\x26\x72\x08\xbd\xfd\x48\xdc\x4a\x66\xa5\x68\xe7\xf7\xff\xd1\xc1\x17\xc9\xa5\x6a\x67\x8e\xbd\xae\x71\x67\x0e\xad\x74\x54\x3f\xa4\x8f\x26\x5d\x84\x8e\x92\xe1\x23\x15\xfa\x85\x50\x89\x29\x33\xa5\xda\xe0\x3d\xd9\xa3\xe9\x96\x5e\x7f\x2f\x8e\xdb\xc1\xf3\x8e\xcc\x42\x60\x8d\xd2\xe5\x96\x3a\x78\x4c\x51\x9a\x91\xf6\x5b\xfc\x31\xd8\x3f\x1d\xbd\xc0\x05\x67\x64\x4f\xbe\x8c\x0c\x8b\xa2\xf8\xb6\x62\x6f\x5a\x89\x91\x5a\x1d\x8f\x6f\x0a\xfe\xbd\x44\xaa\xf1\xb4\x10\x6b\x23\x79\x25\x78\x30\xcd\x3f\x16\xc1\x89\xb8\xf3\xac\xc6\xb2\x34\xee\xca\xa0\x06\x6e\x23\xed\x89\xf5\x75\xd6\x2e\x58\xe0\xda\xf7\x2b\xa3\xcb\x0c\xec\xe0\x4a\xd5\xa1\xf5\x89\xd2\x4d\x8d\x8f\xc2\x57\x8a\x5e\xe2\x3a\x4d\xed\x40\xed\x33\x5e\xcf\x2f\x3d\xf4\xe7\xfa\xf8\x05\x77\xae\x60\xfa\xc0\x52\x62\xfb\x6d\x61\xf0\x0d\x9b\xf9\xfb\x10\x43\x5a\x03\x2a\x3d\x17\x38\x7e\x6c\xf3\x68\x9d\x17\xcb\x23\xf1\x4e\x07\x87\x86\x7a\x89\xf4\x6a\xe3\x15\xd7\xaf\xf9\x74\x1c\x2c\x33\x82\x52\xb4\xd3\x8d\x6f\x9f\x67\x1f\xbb\x04\x39\xac\xfe\x93\x46\xa3\x9e\x02\xb7\x25\xbe\xc1\x1f\x08\xb6\x16\x2e\xe1\x9e\x7a\x3b\x87\x94\xa7\x2d\x5c\x2f\x11\x01\xdb\xf7\x18\x89\xaf\x93\xc6\x1b\x54\xb8\x7b\x87\x5b\xdc\xbf\x47\x78\x87\x50\x55\xf8\xbb\xae\xeb\x7f\x5c\x8d\xc7\x1c\x51\x46\x17\x07\x1f\x43\xb9\xeb\xa5\x4b\x62\xb8\x68\x12\x36\x5d\xa6\xf1\x67\xf8\xeb\xc6\x95\xb8\x73\xa2\x8b\x50\xcf\xe4\xad\xa8\xdb\x4b\x97\x47\xc1\x5b\x67\xdd\xd5\x9b\xcd\x87\x72\x97\x13\x26\x09\xac\xa7\x8d\x93\x06\xc9\x63\xb7\xac\x10\xbf\xf3\x81\x4b\xc0\x4d\x59\x3f\x47\x68\xd8\x53\x2a\x9b\x81\x62\x89\xeb\x91\x09\xa3\x3f\x6d\x85\xed\x69\xe2\x22\x4d\xa3\x65\xe3\x7e\xf8\xe6\xa6\x5c\xc7\x1b\x77\x5a\x99\xb8\xc7\xd5\xed\x15\xbe\x7e\xc5\xd5\xcf\x57\xb8\xc7\x3a\x85\x33\x95\x5d\xe2\xd7\x41\xe8\x24\x37\xa3\xd1\x93\x1e\x69\x22\xea\xca\xdd\xfe\x2c\x6a\xab\x62\x19\x87\x90\x96\x1d\xb6\x66\xd7\x45\x99\x4a\x4a\xad\xf0\x81\x62\xb2\x2d\xad\x02\x67\xb4\x5c\x8d\x07\x2d\xdd\xa5\x25\x48\xbf\xa7\xd5\x4f\x73\x54\xb2\x19\xfc\x2c\xb3\x29\xad\x20\x9a\xf3\x5e\xf1\x91\xbc\x99\x70\x6f\x6f\xab\xbb\xdb\x5b\x70\xfa\x49\x26\x87\x25\xef\x62\x70\x79\x6f\xf0\xb1\x9b\xfd\x3a\x61\x0d\x71\x3b\xec\xbd\x95\xb3\x9f\x62\x66\x08\x1b\xb9\xaa\xda\xfc\x1b\x00\x00\xff\xff\x46\x8d\x91\x98\x4d\x06\x00\x00")

func regexToFastMdBytes() ([]byte, error) {
	return bindataRead(
		_regexToFastMd,
		"regex-to-fast.md",
	)
}

func regexToFastMd() (*asset, error) {
	bytes, err := regexToFastMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "regex-to-fast.md", size: 1613, mode: os.FileMode(420), modTime: time.Unix(1542628451, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa8, 0x8a, 0xbb, 0xa8, 0xbf, 0x1f, 0x90, 0x66, 0xdf, 0xe2, 0x95, 0x33, 0xef, 0x37, 0x26, 0xa2, 0x2, 0x7, 0xee, 0x14, 0x52, 0xfe, 0xb9, 0xe8, 0x72, 0x56, 0x4b, 0x53, 0xc7, 0xc5, 0xcb, 0xf9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mustcompile.md": mustcompileMd,

	"one-loop.md": oneLoopMd,

	"regex-in-func.md": regexInFuncMd,

	"regex-to-fast.md": regexToFastMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"mustcompile.md":   &bintree{mustcompileMd, map[string]*bintree{}},
	"one-loop.md":      &bintree{oneLoopMd, map[string]*bintree{}},
	"regex-in-func.md": &bintree{regexInFuncMd, map[string]*bintree{}},
	"regex-to-fast.md": &bintree{regexToFastMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}

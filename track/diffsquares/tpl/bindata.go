// Code generated by go-bindata. DO NOT EDIT.
// sources:
// basic-float64.md (334B)
// calc-range-condition.md (200B)
// dry.md (215B)
// math-pow.md (106B)
// square-sum-loop.md (167B)
// sum-square-loop.md (187B)

package tpl

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _basicFloat64Md = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xb1\x4e\xec\x40\x0c\x45\xfb\xf7\x15\xb7\x7c\x14\x44\x28\x42\xb4\x74\x48\xf4\x48\xb4\xe3\x9d\x38\x89\xc5\xc4\x8e\x3c\x0e\xbb\xf9\x7b\x34\x59\x85\x82\xd6\xf2\x39\xf7\x3c\xe2\xc3\x90\x9d\x29\x18\x84\xb1\x18\x85\xe8\x84\xd5\x44\x03\xba\x2d\x17\x76\xec\xb6\x21\x93\x62\xab\x8c\xd4\x77\x4f\x09\xa2\x35\x98\x06\xd8\x88\x74\x30\x2f\xcf\xff\xfb\x87\xd4\xe1\x7d\x84\x04\xa4\x22\x17\x26\x47\x18\x26\x43\xcc\x14\x87\x84\x9c\x11\xbe\xb7\x81\xf8\xbb\x8a\x98\x59\x91\xfa\xd4\x68\x56\xdb\xa6\xb9\xc3\x67\xbb\x0d\xc6\xb5\x69\xbe\xd4\xae\x87\xe6\x4a\x1a\x27\xf6\x8a\x37\x73\xf0\x8d\x96\xb5\x30\x64\x3c\x1e\x5a\xa8\x04\xa8\x82\xb0\x92\xd3\xc2\xc1\x0e\xd1\x06\x6d\x9a\x43\x4c\x91\xa9\x94\x7b\x19\xdf\x56\xce\x51\x7f\x43\xcc\x4f\x0f\xd5\x2a\x93\x36\x55\x18\x08\xdf\xe4\x42\x97\xc2\x77\x4c\x2a\xa8\x38\xd3\xb0\x9f\x64\xf7\xef\x27\x00\x00\xff\xff\x69\xb9\x5d\xee\x4e\x01\x00\x00")

func basicFloat64MdBytes() ([]byte, error) {
	return bindataRead(
		_basicFloat64Md,
		"basic-float64.md",
	)
}

func basicFloat64Md() (*asset, error) {
	bytes, err := basicFloat64MdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "basic-float64.md", size: 334, mode: os.FileMode(420), modTime: time.Unix(1542465790, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0x86, 0x81, 0xea, 0x45, 0xab, 0xad, 0xf4, 0xd6, 0x4c, 0x7, 0xe8, 0xb8, 0x68, 0x21, 0x72, 0x6b, 0x17, 0x40, 0x3f, 0x89, 0x35, 0x44, 0xe1, 0x3a, 0xff, 0x32, 0x1a, 0xc7, 0x7d, 0xb, 0xc1}}
	return a, nil
}

var _calcRangeConditionMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcd\x31\x4e\xc0\x40\x0c\x44\xd1\x9e\x53\x4c\x83\xa8\xc8\x01\xb8\x01\x3d\x0d\x5d\x8c\x3d\xb0\x16\x1b\x3b\xca\x3a\x91\xb8\x3d\xda\x40\x39\xc5\x9b\xff\x8c\xf7\x3c\xa1\x79\x76\x83\x6f\xfb\x91\x17\x51\x8d\x18\x3b\x69\xc8\xcf\x7b\x1c\x12\x5f\x44\xcf\xdc\x5f\xf0\xd6\x08\xcd\x30\x2f\xcf\x40\x90\x36\x50\x89\x0f\x42\x1b\xf5\x7b\xa2\x00\x2f\x1e\x3f\x37\x80\x84\xc1\x0b\xa3\xcd\x44\x3c\xd5\xc4\x25\x1e\x50\xe9\x7a\x76\x99\x37\x03\xd5\xa4\xa0\x12\xf3\x47\xae\x74\xa3\x2d\x78\x0d\x54\xf3\x01\x95\x41\xac\x8f\x63\xc5\x3d\xfe\x18\xed\xbf\x52\xbe\x71\x79\xf8\x0d\x00\x00\xff\xff\xf0\x2c\x42\xf3\xc8\x00\x00\x00")

func calcRangeConditionMdBytes() ([]byte, error) {
	return bindataRead(
		_calcRangeConditionMd,
		"calc-range-condition.md",
	)
}

func calcRangeConditionMd() (*asset, error) {
	bytes, err := calcRangeConditionMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "calc-range-condition.md", size: 200, mode: os.FileMode(420), modTime: time.Unix(1542460460, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4b, 0xa6, 0xc7, 0x4, 0x8a, 0x4, 0x70, 0x81, 0x93, 0x43, 0xec, 0xdc, 0x5e, 0x5e, 0x9d, 0x29, 0xdd, 0x2, 0xd4, 0xce, 0xcd, 0xb1, 0x89, 0x1a, 0x94, 0x61, 0x1d, 0x16, 0x43, 0xba, 0x1b, 0xef}}
	return a, nil
}

var _dryMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xce\x31\x4e\x05\x31\x0c\x84\xe1\x9e\x53\xcc\x01\xe0\x9d\x82\x7e\x8b\xa5\xa1\x8b\x49\x1c\x62\x29\x89\x97\xd8\x5e\xb4\xb7\x47\x2b\xa4\xd7\xcd\x14\xbf\xf4\xbd\xe1\x53\x03\x59\xa3\x17\x98\x8c\xa3\x4b\xbd\x70\x69\x2c\xa4\x77\xa9\x95\x17\xcf\xcc\x09\x35\x66\x76\xd1\x89\xaf\x0b\x8d\x4e\x99\xdf\x10\x47\xa6\xde\x91\xf6\x18\x5b\xdd\x7f\x82\x16\x5b\x02\xcd\x82\xf4\xff\xb6\xba\xc7\xb0\xf4\x0a\x99\xe6\x4c\x05\x5a\xb1\xf8\x60\xf2\xbb\xf7\x46\x8e\xac\x85\x1f\xf8\xb8\xa7\x18\xa6\x3a\xac\xeb\x2f\x2f\x1c\x4b\x4f\x29\x5c\x6e\x0b\xc2\x18\xde\x18\x83\xbc\xf1\x20\x97\x4c\x1d\x55\xd7\x88\x4e\x06\x99\xf0\xa6\xc6\x4f\xa4\x3d\x5e\xfe\x02\x00\x00\xff\xff\x41\xd0\x32\x34\xd7\x00\x00\x00")

func dryMdBytes() ([]byte, error) {
	return bindataRead(
		_dryMd,
		"dry.md",
	)
}

func dryMd() (*asset, error) {
	bytes, err := dryMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dry.md", size: 215, mode: os.FileMode(420), modTime: time.Unix(1542464685, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0xa5, 0xbd, 0x27, 0x3c, 0x35, 0xb3, 0x89, 0x7c, 0x7d, 0x39, 0xd8, 0xf3, 0x69, 0xee, 0xe6, 0xfe, 0x9b, 0x3e, 0xb0, 0xc9, 0xa6, 0x10, 0xb, 0x41, 0x88, 0xaf, 0xdb, 0x35, 0x3c, 0x5a, 0x7}}
	return a, nil
}

var _mathPowMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xca\xbb\x0d\xc2\x40\x0c\x80\xe1\x9e\x29\xfe\x1a\x41\xf6\xa0\x63\x84\x33\x91\xe1\x82\x12\x1f\xf8\xa1\xc0\xf6\x48\xf4\xdf\x99\xcb\x9d\xef\x28\x9e\x15\xc9\x2e\x96\xe4\x20\xde\x25\xae\x08\x56\xdb\x4d\xfd\xf4\x17\xb3\x18\x15\x4a\x76\x45\x3f\x2f\xd7\x88\x65\x18\xcd\x38\x62\x0d\x97\xec\xea\x64\x17\x63\x96\x75\x5d\xec\x41\xdb\x24\xfb\x74\x1d\x7b\x9b\x0e\xbf\x00\x00\x00\xff\xff\xc1\xc4\x7a\x68\x6a\x00\x00\x00")

func mathPowMdBytes() ([]byte, error) {
	return bindataRead(
		_mathPowMd,
		"math-pow.md",
	)
}

func mathPowMd() (*asset, error) {
	bytes, err := mathPowMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "math-pow.md", size: 106, mode: os.FileMode(420), modTime: time.Unix(1542463614, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd2, 0x1e, 0x7f, 0x7a, 0xce, 0x7, 0x5a, 0xc1, 0x5b, 0xe1, 0xe3, 0x86, 0x1d, 0x56, 0x79, 0xc9, 0x78, 0xea, 0x60, 0x73, 0xe0, 0x38, 0x9f, 0xe0, 0x3d, 0xe6, 0x78, 0x3d, 0x92, 0x48, 0xb1, 0x42}}
	return a, nil
}

var _squareSumLoopMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\x8e\xb1\x8e\xc2\x30\x10\x05\xfb\xfb\x8a\x57\xde\x1d\x22\x28\x94\xfc\x01\x15\x45\x68\xe8\x76\x31\x1b\xd9\xc2\xf6\x82\xbd\xab\x88\xbf\x47\x84\x6a\x46\x9a\x66\xb6\xb8\xa8\x23\xa8\xe7\x1b\xac\xbd\x60\x8a\xc0\x39\x78\x66\x13\xd0\xf4\x74\x6e\x72\x9a\x27\x2f\x84\x25\x59\x54\x37\x30\xb2\xea\x63\xc0\x11\xf7\xaa\x0b\x2c\xa6\x8e\xd4\xc1\x28\x6c\x51\x0a\x5b\x0a\x9c\x91\x7a\x77\x19\x70\x8e\xd2\xe4\x9b\x67\x6d\xc5\xf3\x4a\x58\x14\x74\x2f\xd0\x79\xd5\xea\xe5\x2a\xad\x83\x46\xfa\x1c\x50\xa5\x03\xa8\xfe\xff\xd6\xcd\xf8\xb7\xdb\xd3\xf0\xf3\x0e\x00\x00\xff\xff\x14\x4a\x15\x78\xa7\x00\x00\x00")

func squareSumLoopMdBytes() ([]byte, error) {
	return bindataRead(
		_squareSumLoopMd,
		"square-sum-loop.md",
	)
}

func squareSumLoopMd() (*asset, error) {
	bytes, err := squareSumLoopMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "square-sum-loop.md", size: 167, mode: os.FileMode(420), modTime: time.Unix(1542460460, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9b, 0x80, 0x8f, 0xe2, 0xaf, 0x67, 0x1b, 0x4f, 0x46, 0x7e, 0xba, 0x94, 0xd5, 0xb5, 0x95, 0xd6, 0xe3, 0x29, 0x4, 0xe6, 0x43, 0x27, 0x3c, 0xf5, 0xcc, 0xf5, 0x99, 0x72, 0xef, 0x1c, 0x29, 0x7b}}
	return a, nil
}

var _sumSquareLoopMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\xb1\x0a\x02\x31\x10\x44\x7b\xbf\x62\x7e\xc0\x03\x5b\xff\xc0\xca\xe2\x2a\xbb\xac\x71\x8f\x84\x4b\xb2\x67\x76\x97\xc3\xbf\x97\x33\x60\x35\xf0\x06\x66\xde\x19\x0f\x71\x44\xf1\xf2\x82\xf5\x0f\x4c\x10\xa9\x44\x2f\x64\x8c\x30\x7b\xbd\x2f\xf3\xdb\xa9\xb3\x06\xec\xd9\x92\xb8\x81\x50\x44\xb6\x09\x37\xac\x4d\x76\x58\xca\x8a\xac\x20\x54\xb2\xc4\x95\x2c\x47\x2a\xc8\xaa\xce\x57\x58\xe2\xce\xa3\x5e\xa4\x57\x2f\xbf\x3c\x30\xd4\x2b\x64\x81\x8e\xfd\x3f\x6e\x5e\x9f\xdc\x15\xe1\x12\x0e\x9d\xd0\xc2\x34\x24\xa9\x1d\xc7\x2b\xb2\xc1\xb7\xe9\xf4\x0d\x00\x00\xff\xff\x26\xed\x77\x3a\xbb\x00\x00\x00")

func sumSquareLoopMdBytes() ([]byte, error) {
	return bindataRead(
		_sumSquareLoopMd,
		"sum-square-loop.md",
	)
}

func sumSquareLoopMd() (*asset, error) {
	bytes, err := sumSquareLoopMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sum-square-loop.md", size: 187, mode: os.FileMode(420), modTime: time.Unix(1542462342, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x11, 0xd, 0xa5, 0xcb, 0x64, 0x85, 0x8c, 0xa2, 0x5e, 0x2b, 0xaf, 0x8a, 0x5c, 0xb8, 0xc2, 0xd5, 0xd0, 0x88, 0x27, 0xb8, 0x99, 0xee, 0xee, 0x79, 0x12, 0x2a, 0xac, 0xec, 0xad, 0x6d, 0x8a, 0xb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"basic-float64.md": basicFloat64Md,

	"calc-range-condition.md": calcRangeConditionMd,

	"dry.md": dryMd,

	"math-pow.md": mathPowMd,

	"square-sum-loop.md": squareSumLoopMd,

	"sum-square-loop.md": sumSquareLoopMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"basic-float64.md":        &bintree{basicFloat64Md, map[string]*bintree{}},
	"calc-range-condition.md": &bintree{calcRangeConditionMd, map[string]*bintree{}},
	"dry.md":                  &bintree{dryMd, map[string]*bintree{}},
	"math-pow.md":             &bintree{mathPowMd, map[string]*bintree{}},
	"square-sum-loop.md":      &bintree{squareSumLoopMd, map[string]*bintree{}},
	"sum-square-loop.md":      &bintree{sumSquareLoopMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}

// Code generated by go-bindata. DO NOT EDIT.
// sources:
// calc-range-condition.md (200B)
// one-loop.md (167B)

package tpl

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _calcRangeConditionMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcd\x31\x4e\xc0\x40\x0c\x44\xd1\x9e\x53\x4c\x83\xa8\xc8\x01\xb8\x01\x3d\x0d\x5d\x8c\x3d\xb0\x16\x1b\x3b\xca\x3a\x91\xb8\x3d\xda\x40\x39\xc5\x9b\xff\x8c\xf7\x3c\xa1\x79\x76\x83\x6f\xfb\x91\x17\x51\x8d\x18\x3b\x69\xc8\xcf\x7b\x1c\x12\x5f\x44\xcf\xdc\x5f\xf0\xd6\x08\xcd\x30\x2f\xcf\x40\x90\x36\x50\x89\x0f\x42\x1b\xf5\x7b\xa2\x00\x2f\x1e\x3f\x37\x80\x84\xc1\x0b\xa3\xcd\x44\x3c\xd5\xc4\x25\x1e\x50\xe9\x7a\x76\x99\x37\x03\xd5\xa4\xa0\x12\xf3\x47\xae\x74\xa3\x2d\x78\x0d\x54\xf3\x01\x95\x41\xac\x8f\x63\xc5\x3d\xfe\x18\xed\xbf\x52\xbe\x71\x79\xf8\x0d\x00\x00\xff\xff\xf0\x2c\x42\xf3\xc8\x00\x00\x00")

func calcRangeConditionMdBytes() ([]byte, error) {
	return bindataRead(
		_calcRangeConditionMd,
		"calc-range-condition.md",
	)
}

func calcRangeConditionMd() (*asset, error) {
	bytes, err := calcRangeConditionMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "calc-range-condition.md", size: 200, mode: os.FileMode(420), modTime: time.Unix(1542398153, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4b, 0xa6, 0xc7, 0x4, 0x8a, 0x4, 0x70, 0x81, 0x93, 0x43, 0xec, 0xdc, 0x5e, 0x5e, 0x9d, 0x29, 0xdd, 0x2, 0xd4, 0xce, 0xcd, 0xb1, 0x89, 0x1a, 0x94, 0x61, 0x1d, 0x16, 0x43, 0xba, 0x1b, 0xef}}
	return a, nil
}

var _oneLoopMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\x8e\xb1\x8e\xc2\x30\x10\x05\xfb\xfb\x8a\x57\xde\x1d\x22\x28\x94\xfc\x01\x15\x45\x68\xe8\x76\x31\x1b\xd9\xc2\xf6\x82\xbd\xab\x88\xbf\x47\x84\x6a\x46\x9a\x66\xb6\xb8\xa8\x23\xa8\xe7\x1b\xac\xbd\x60\x8a\xc0\x39\x78\x66\x13\xd0\xf4\x74\x6e\x72\x9a\x27\x2f\x84\x25\x59\x54\x37\x30\xb2\xea\x63\xc0\x11\xf7\xaa\x0b\x2c\xa6\x8e\xd4\xc1\x28\x6c\x51\x0a\x5b\x0a\x9c\x91\x7a\x77\x19\x70\x8e\xd2\xe4\x9b\x67\x6d\xc5\xf3\x4a\x58\x14\x74\x2f\xd0\x79\xd5\xea\xe5\x2a\xad\x83\x46\xfa\x1c\x50\xa5\x03\xa8\xfe\xff\xd6\xcd\xf8\xb7\xdb\xd3\xf0\xf3\x0e\x00\x00\xff\xff\x14\x4a\x15\x78\xa7\x00\x00\x00")

func oneLoopMdBytes() ([]byte, error) {
	return bindataRead(
		_oneLoopMd,
		"one-loop.md",
	)
}

func oneLoopMd() (*asset, error) {
	bytes, err := oneLoopMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "one-loop.md", size: 167, mode: os.FileMode(420), modTime: time.Unix(1542397381, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9b, 0x80, 0x8f, 0xe2, 0xaf, 0x67, 0x1b, 0x4f, 0x46, 0x7e, 0xba, 0x94, 0xd5, 0xb5, 0x95, 0xd6, 0xe3, 0x29, 0x4, 0xe6, 0x43, 0x27, 0x3c, 0xf5, 0xcc, 0xf5, 0x99, 0x72, 0xef, 0x1c, 0x29, 0x7b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"calc-range-condition.md": calcRangeConditionMd,

	"one-loop.md": oneLoopMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"calc-range-condition.md": &bintree{calcRangeConditionMd, map[string]*bintree{}},
	"one-loop.md":             &bintree{oneLoopMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}

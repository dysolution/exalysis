// Code generated by go-bindata. DO NOT EDIT.
// sources:
// buffer-size-len.md (496B)
// concurrency-not-faster.md (670B)
// waitgroup-add-one.md (201B)
// waitgroup-not-needed.md (96B)
// waitgroup.md (217B)

package tpl

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bufferSizeLenMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x91\xc1\x92\x14\x21\x10\x44\xef\x7e\x45\x1e\x35\x42\x09\xfd\x05\x6f\x7b\xd6\x8b\xb7\xa9\x6e\x92\xa6\x62\x81\x9a\x80\xc2\xd9\xf5\xeb\x0d\xa6\x75\x63\xf6\x0a\x54\xe6\xe3\xd5\x17\xfc\xb2\x09\xe9\xc4\xa0\xbb\xb6\x03\x82\x6d\xa6\xc4\x8e\x64\x1d\x9e\x89\x3d\x4b\x6b\x2c\x01\x3f\xb3\x38\x74\x40\x70\x98\x45\x68\xa4\x40\x5a\xc4\x4d\x4b\xc1\xa8\x66\x9e\xcf\x01\xab\x75\x36\xdd\xc5\xd5\x1a\xaa\x3c\xaf\x58\xf5\x95\xac\x8e\x24\xc3\xd9\x03\x7e\xbc\xf5\x25\x7d\xc1\xd0\x3f\xc4\xcd\x66\x89\xd8\x88\x8d\xee\x5c\xed\x36\x8f\x1c\xf0\xd4\xd0\x79\x48\x8f\x03\x6e\x18\x57\x32\xae\xa2\xce\x45\xd3\x0c\x51\x17\x30\xdb\x7e\x9f\xbc\x91\xed\x31\xb5\xe8\x33\xc1\x70\x04\x5c\xbe\x7d\xbd\xdc\x89\x2f\x85\xed\xa3\xf3\xc5\xc7\xa7\x4b\xc0\xf7\xe9\xd0\xf4\xee\x70\x05\xe7\x79\x10\xbe\xfe\xbc\x4b\xc3\xc6\xdd\x2a\x21\xb8\x76\xdb\x0a\x2b\x64\x9c\x97\x95\xd5\xfa\x2b\x1a\x79\xe2\x6d\x84\x94\x62\xbb\x38\x63\xc0\x53\xc2\xab\x4d\x24\xb2\x3c\x32\x55\x3d\xb2\xbf\xbd\x83\x9b\xa1\xce\x3d\xff\x0f\xab\x36\x1c\x96\xee\x36\x5d\x2b\x3f\x2f\x7d\xa7\x9d\xe1\xcb\xf6\xc6\x73\x07\x6e\xc8\xf2\x9b\x90\x86\x79\xbd\xb2\xa3\x68\x5d\x8e\xff\xad\xee\x61\x7d\xf7\xde\xf0\xe1\x6f\x00\x00\x00\xff\xff\x29\x96\xbc\xa6\xf0\x01\x00\x00")

func bufferSizeLenMdBytes() ([]byte, error) {
	return bindataRead(
		_bufferSizeLenMd,
		"buffer-size-len.md",
	)
}

func bufferSizeLenMd() (*asset, error) {
	bytes, err := bufferSizeLenMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "buffer-size-len.md", size: 496, mode: os.FileMode(420), modTime: time.Unix(1542406074, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x35, 0x24, 0xf3, 0xb0, 0x99, 0x48, 0x16, 0xe9, 0x10, 0x4f, 0xc, 0x73, 0x7f, 0x4, 0x4f, 0xc7, 0xf, 0xa2, 0xa2, 0x14, 0x3, 0x59, 0xda, 0xa4, 0x1a, 0x1a, 0x99, 0xb7, 0xd0, 0xaa, 0xd0, 0x1d}}
	return a, nil
}

var _concurrencyNotFasterMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x92\xcd\xca\xdc\x3a\x0c\x86\xf7\xb9\x8a\x77\x77\x20\x90\xb9\x80\xb3\x29\xb4\x8b\x6f\x5b\x68\xa1\x74\xa9\x71\x94\xd8\x8c\x63\xa5\x96\x3c\x69\x7a\xf5\x45\x9e\xef\x67\xba\x1a\x3c\x48\xaf\x1e\x3d\xca\x30\x4d\xd3\x30\x8e\xe3\x17\x29\xa1\xd5\xca\x25\x9c\xff\xe3\x47\x24\x43\x52\x58\x64\xec\x92\x8a\x7d\x1a\xc7\x71\x18\xbe\xbf\x3d\x21\x0b\x2c\x26\x05\xff\xe6\x1a\x92\xf2\xa3\x98\x0c\x4d\x53\x59\x11\x3e\xc2\x30\x0b\x2b\x8a\x18\x28\x1f\x74\x2a\x22\xe7\x1d\xa9\xa0\xf2\x4a\x75\x56\x98\x40\x77\xe6\xf9\x82\x9f\xd2\x10\xa8\x60\x65\xeb\x93\xdf\x53\x0c\x4b\x2b\xc1\x92\x14\x90\x62\x21\x35\xff\xf5\x12\xb1\xc8\x15\x52\x18\xd3\x84\x8d\xce\x2b\x43\x73\x5a\xa3\xe5\xb3\xd7\x71\xbd\xe0\x73\x7b\x8b\xd3\x0e\xfe\x0c\xe7\xd8\x22\x88\x69\x8d\x98\x9c\x2a\xc8\xb6\x53\x4d\x2a\xc5\xc1\xbc\x8d\x82\x35\xca\x38\xa4\xde\x1e\x2b\x16\xe6\x07\xf6\x95\x31\xf7\xd1\xaf\x0f\x5e\x16\x0e\x96\xee\x7c\xc1\x57\xaa\x94\x33\xe7\xf4\xc7\x75\x10\xdc\x4a\x66\x18\xe9\xcd\x67\xca\x62\x5c\xba\x94\x43\xaa\x45\x24\x83\x54\xf0\x9d\x1d\xa0\x15\xe3\x8a\xbd\xca\xdc\x1e\x69\xc3\xf0\xcd\x52\xce\x78\x11\xef\xed\xeb\xa7\xc5\x7b\xba\xda\x8d\xca\x09\xdd\x28\xe7\x1e\xaf\x4f\xda\xf2\x89\x9c\x6e\x0c\xbe\xac\x17\x5f\x8e\x70\xf0\x15\xca\xf5\xee\x5e\xfc\x9a\xcf\x5c\x9b\x7b\xeb\x50\x2b\xa5\x82\xa5\xca\x86\x17\xf9\x4f\xff\x11\x76\x6d\x86\xf3\xf5\x4e\xda\xa9\xfc\x5a\x9b\x54\x86\xc5\x2a\x6d\x8d\x7b\x7b\xbf\xce\xc7\x34\xff\x87\x70\x44\xc9\xdc\x5b\xbb\x4d\x29\xd8\x5a\xb6\xb4\x67\x46\xe5\x5f\x8d\xd5\x14\x64\x90\x12\x7c\x69\xff\x30\xff\x06\x00\x00\xff\xff\x8e\xe4\xe1\x79\x9e\x02\x00\x00")

func concurrencyNotFasterMdBytes() ([]byte, error) {
	return bindataRead(
		_concurrencyNotFasterMd,
		"concurrency-not-faster.md",
	)
}

func concurrencyNotFasterMd() (*asset, error) {
	bytes, err := concurrencyNotFasterMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "concurrency-not-faster.md", size: 670, mode: os.FileMode(420), modTime: time.Unix(1542403377, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa6, 0x46, 0xe, 0x5d, 0x74, 0xc8, 0xa4, 0x57, 0x19, 0xc3, 0x2b, 0x9c, 0x30, 0x1b, 0x45, 0x3c, 0xd7, 0x60, 0xf5, 0xaf, 0x5, 0xb6, 0xb6, 0x73, 0x8, 0x11, 0x9e, 0x99, 0x58, 0xba, 0x24, 0x54}}
	return a, nil
}

var _waitgroupAddOneMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\x31\x52\x03\x31\x0c\x46\xe1\x9e\x53\xfc\x65\x32\x03\x7b\x00\xba\x54\x0c\x27\x60\xe8\xac\xc5\x8a\x2d\xf0\x4a\x19\x59\xc6\xf8\xf6\x4c\x68\xe8\xbf\xf7\x9e\xf0\x6e\x03\xe4\x8c\xd1\x45\x0b\x08\xa9\x2f\xfd\xd8\xde\x48\xe2\xc5\x6d\xdc\x12\x66\x65\x67\x2c\x1b\x48\x97\x9c\x13\x4c\x19\xa2\xe0\x6f\xf6\x85\x66\x76\x83\x04\x3b\x85\x98\x6e\x78\xbd\xfe\xc9\x2f\xb5\x89\xab\xdb\x81\xa8\x8c\x9d\x8b\xa8\xde\xf7\xd5\x26\x0e\xd2\xf5\x9f\xf4\xbb\x70\xc6\x94\xd6\xb0\xf3\x23\x3e\x47\x0f\x50\xce\x88\x4a\x01\x1d\xc7\xce\x0e\x97\x52\x03\x34\x69\x3d\x23\xcd\xb2\x5d\x72\x3e\x35\xd6\x53\xf0\x4f\xf4\xf3\x39\x6d\x0f\xbf\x01\x00\x00\xff\xff\xa1\x8d\xcf\x34\xc9\x00\x00\x00")

func waitgroupAddOneMdBytes() ([]byte, error) {
	return bindataRead(
		_waitgroupAddOneMd,
		"waitgroup-add-one.md",
	)
}

func waitgroupAddOneMd() (*asset, error) {
	bytes, err := waitgroupAddOneMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "waitgroup-add-one.md", size: 201, mode: os.FileMode(420), modTime: time.Unix(1542404815, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa, 0x1f, 0x9, 0xca, 0x3b, 0x18, 0xaf, 0xd9, 0x8f, 0xa4, 0xe6, 0x1f, 0x1a, 0xa2, 0x6, 0x2, 0xae, 0xeb, 0xd2, 0xec, 0xd1, 0x7d, 0x2e, 0x92, 0x76, 0xd6, 0x6, 0x29, 0xaf, 0xd0, 0x8c, 0xe3}}
	return a, nil
}

var _waitgroupNotNeededMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0d\x02\x31\x0c\x05\xd0\x9e\x29\xfe\x02\xdc\x0a\x14\x14\x8c\x80\xe8\xce\x4a\xbe\x88\xc5\x61\x23\xc7\x46\xca\xf6\xf7\xae\x78\x79\x41\x82\xa8\xa9\xf6\x86\x60\x9f\xcb\xda\xf6\x14\xcd\x47\x78\xfd\x76\x0c\x06\x91\x43\x12\x3a\x61\x9e\x08\xca\x71\x2c\x18\xd9\xd9\x37\xdc\xc5\xb0\xbc\xd0\x06\xdb\x07\x62\x1d\xc1\xaf\xff\x09\xcd\xdb\xe5\x0c\x00\x00\xff\xff\x52\x3e\xee\xe4\x60\x00\x00\x00")

func waitgroupNotNeededMdBytes() ([]byte, error) {
	return bindataRead(
		_waitgroupNotNeededMd,
		"waitgroup-not-needed.md",
	)
}

func waitgroupNotNeededMd() (*asset, error) {
	bytes, err := waitgroupNotNeededMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "waitgroup-not-needed.md", size: 96, mode: os.FileMode(420), modTime: time.Unix(1542404649, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xda, 0x1a, 0xf8, 0xca, 0x95, 0x2a, 0x36, 0xb5, 0x8c, 0x92, 0x3c, 0x1f, 0xe2, 0x4f, 0xf9, 0x33, 0xa5, 0x7e, 0x9f, 0x4, 0x50, 0xb2, 0x54, 0xd3, 0x5e, 0xc4, 0x15, 0xaa, 0x9c, 0x45, 0x9f, 0xab}}
	return a, nil
}

var _waitgroupMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xcb\x6d\xc3\x30\x10\x44\xef\xa9\x62\x1a\x08\x0b\x48\x03\xb9\xe7\x12\xe4\x26\x86\x1c\x8b\x0b\x8b\xbb\x02\x3f\x92\xd5\xbd\x21\xc2\x86\x7d\x1d\xcc\xc3\x7b\x9f\xf8\xb3\x0e\x5f\x88\x5e\x45\x67\x78\x4c\xf5\xd0\xe0\x7e\xbd\xb4\xef\x62\x7d\x9d\x90\x58\xe8\xc6\x2d\x58\x5f\x22\xb2\x6d\x44\x4b\x44\x61\xa0\x6c\x27\x55\x25\x12\x76\x19\x6b\x48\x5e\x95\x0b\x44\x9b\x8d\x21\x7b\x51\xcc\x56\xac\x37\x51\xc2\x6b\xc4\xcc\x86\x22\xf1\x89\x4c\x2f\x9b\xc3\x0f\x33\xf3\x3f\xcb\xd7\x50\x5e\xd5\x76\x24\xdb\x91\xbd\x1e\xe0\xc2\x4c\x6d\x15\xc7\x23\x9a\xb7\x95\xa1\x9d\x09\xa6\xef\x76\xf7\x71\x0f\x00\x00\xff\xff\xac\xb2\x83\xf6\xd9\x00\x00\x00")

func waitgroupMdBytes() ([]byte, error) {
	return bindataRead(
		_waitgroupMd,
		"waitgroup.md",
	)
}

func waitgroupMd() (*asset, error) {
	bytes, err := waitgroupMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "waitgroup.md", size: 217, mode: os.FileMode(420), modTime: time.Unix(1542402591, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3c, 0xfc, 0xf4, 0xa0, 0xc3, 0xb9, 0x9c, 0x2f, 0x87, 0xfc, 0xbf, 0x2f, 0x51, 0x61, 0x7, 0xf4, 0x87, 0x58, 0xa9, 0x40, 0x5f, 0x4a, 0x81, 0x5c, 0xf4, 0xfa, 0x4b, 0x90, 0x4, 0xa1, 0x18, 0x11}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"buffer-size-len.md": bufferSizeLenMd,

	"concurrency-not-faster.md": concurrencyNotFasterMd,

	"waitgroup-add-one.md": waitgroupAddOneMd,

	"waitgroup-not-needed.md": waitgroupNotNeededMd,

	"waitgroup.md": waitgroupMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"buffer-size-len.md":        &bintree{bufferSizeLenMd, map[string]*bintree{}},
	"concurrency-not-faster.md": &bintree{concurrencyNotFasterMd, map[string]*bintree{}},
	"waitgroup-add-one.md":      &bintree{waitgroupAddOneMd, map[string]*bintree{}},
	"waitgroup-not-needed.md":   &bintree{waitgroupNotNeededMd, map[string]*bintree{}},
	"waitgroup.md":              &bintree{waitgroupMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
